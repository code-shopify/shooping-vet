{% comment %}
	------------------------------------------------------------------------------
	Snippet: Filter list
	- filter: filter object (required)

	Usage:

	{%- render 'filter-list', filter: filter -%}
	------------------------------------------------------------------------------
{% endcomment %}

{%- render 'adastra' with '/src/styles/filter-list.scss' -%}

{%- assign sorted_values = filter.values -%}
{%- assign swatch_option = settings.color_swatches_option | default: 'Color' | downcase -%}
{%- assign swatches 	 = swatch_option | split: ',' -%}
{%- assign filter_label  = filter.label | downcase -%}

{% if filter.operator == "AND" %}
	{% comment %} Keep the selected values grouped together when operator is AND {% endcomment %}

	{% assign active_filter_values = filter.values | where: 'active', true %}
	{% assign inactive_filter_values = filter.values | where: 'active', false %}
	{% assign sorted_values = active_filter_values | concat: inactive_filter_values %}
{% endif %}

<ul class="filter-list js-filter-list">
	{%- for filter_value in sorted_values -%}
		<li class="filter-list__item">
			{%- capture filter_active -%}
				{% if filter_value.active %}
					checked
				{% endif %}
			{%- endcapture -%}

			{%- capture filter_disable -%}
				{% if filter_value.count == 0 and filter_value.active == false %}
					disabled
				{% endif %}
			{%- endcapture -%}

			<input
				class="checkbox visually-hidden filter-list__checkbox"
				id="Filter-{{- filter.label | escape -}}-{{- forloop.index -}}"
				type="checkbox"
				name="{{- filter_value.param_name -}}"
				value="{{- filter_value.value -}}"
				{{ filter_active | strip_newlines }}
				{{ filter_disable | strip_newlines }}
			>

			{% assign filter_value_label = filter_value.label %}
			{% assign tech_tag = filter_value_label | slice: 0, 7 %}

			{% if tech_tag contains 'label__' %}
				{% assign filter_value_label = filter_value_label
					| remove_first: 'label__'
					| remove_first: ':primary'
					| remove_first: ':secondary'
				%}
			{% endif %}

			{% if filter.presentation == "swatch" %}
				{% if filter_value.display.type == "colors" %}
					{% assign size_limit = filter_value.display.value.size | at_most: 4 %}
					{% assign rotation = '0deg' %}

					{% if size_limit == 2 %}
						{% assign rotation = '45deg' %}
					{% endif %}

					{% assign angle_increment = 360 | divided_by: size_limit %}
					{% assign angle = 0 %}

					{%- capture conic_gradient -%}
						{%- for color in filter_value.display.value limit: size_limit -%}
							{{ color }} {{ angle }}deg{%- assign angle = angle | plus: angle_increment %} {{ angle }}deg{%- unless forloop.last %}, {%- endunless -%}
						{%- endfor -%}
					{%- endcapture -%}

					<label
						class="filter-list__input-label checkbox-label filter-list__input-label--swatch"
						for="Filter-{{- filter.label | escape -}}-{{- forloop.index -}}"
						{% if filter_value.display.type == "colors" %}
							style="--swatch-color: ''; --swatch-image: conic-gradient({{ conic_gradient }});"
						{% endif %}
					>
						<span class="checkbox-label__box filter-list__checkbox-box"></span>
						{{- filter_value_label | escape }} <span class="filter-list__input-label-count">({{- filter_value.count -}})</span>
					</label>
				{% else %}
					<label
						class="filter-list__input-label checkbox-label filter-list__input-label--swatch"
						for="Filter-{{- filter.label | escape -}}-{{- forloop.index -}}"
						style="--swatch-color: {{ filter_value.display.value }}; --swatch-image: url({{- filter_value.display.value | image_url: width: 60, height: 60 -}});"
					>
						<span class="checkbox-label__box filter-list__checkbox-box"></span>
						{{- filter_value_label | escape }} <span class="filter-list__input-label-count">({{- filter_value.count -}})</span>
					</label>
				{% endif %}
			{% else %}
				{% assign is_swatch = false %}
				{%- assign swatch_image = filter_value.value | handle | prepend: 'swatch-' | append: '.png' -%}

				{% for swatch in swatches %}
					{% assign trimmed_string = swatch | strip %}

					{% if filter_label == trimmed_string %}
						{% assign is_swatch = true %}
						{% break %}
					{% endif %}
				{% endfor %}

				<label
					class="filter-list__input-label checkbox-label {% if is_swatch and show_swatches %}filter-list__input-label--swatch{% endif %}"
					for="Filter-{{- filter.label | escape -}}-{{- forloop.index -}}"
					{% if is_swatch and show_swatches %}
						style="--swatch-color: {{ filter_value.value | split: ' ' | last | handle }}; {{-  -}}
							{% if images[swatch_image] != blank -%}
								--swatch-image: url({{- images[swatch_image] | image_url: width: 34, height: 34 -}});
							{%- endif -%}"
					{% endif %}
				>
					<span class="checkbox-label__box filter-list__checkbox-box"></span>
					{{- filter_value_label | escape }} <span class="filter-list__input-label-count">({{- filter_value.count -}})</span>
				</label>
			{% endif %}
		</li>
	{%- endfor -%}
</ul>
